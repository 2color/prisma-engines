use native_types::NativeType;
/// represents an instance of a native type declared in the Prisma schema
#[derive(Debug, Clone, PartialEq)]
pub struct NativeTypeInstance {
    /// the name of the native type used in the Prisma schema
    pub name: String,
    /// the arguments that were provided
    pub args: Vec<String>,
    /// the serialized representation of this native type. The serialized format is generated by the `native-types` library
    pub native_type: NativeType,
}

impl NativeTypeInstance {
    pub fn new(name: &str, args: Vec<String>, native_type: NativeType) -> Self {
        NativeTypeInstance {
            name: name.to_string(),
            args,
            native_type,
        }
    }

    pub fn render(&self) -> String {
        if self.args.len() == 0 {
            self.name.to_string()
        } else {
            let args_as_strings: Vec<String> = self.args.iter().map(|a| a.to_string()).collect();
            format!("{}({})", self.name, args_as_strings.join(","))
        }
    }
}
