use native_types::{MsSqlType, NativeType, TypeParameter};
use serde::de::DeserializeOwned;
use std::convert::TryFrom;

/// represents an instance of a native type declared in the Prisma schema
#[derive(Debug, Clone, PartialEq)]
pub struct NativeTypeInstance {
    /// the name of the native type used in the Prisma schema
    pub name: String,
    /// the arguments that were provided
    pub args: Vec<TypeParameter>,
    /// the serialized representation of this native type. The serialized format is generated by the `native-types` library
    pub serialized_native_type: serde_json::Value,
}

impl NativeTypeInstance {
    pub fn new<T>(name: &str, args: Vec<T>, native_type: &dyn NativeType) -> Self
    where
        T: Into<TypeParameter>,
    {
        let args = args.into_iter().map(Into::into).collect();

        NativeTypeInstance {
            name: name.to_string(),
            args,
            serialized_native_type: native_type.to_json(),
        }
    }

    pub fn deserialize_native_type<T>(&self) -> T
    where
        T: DeserializeOwned,
    {
        let error_msg = format!(
            "Deserializing the native type from json failed: {:?}",
            self.serialized_native_type.as_str()
        );
        serde_json::from_value(self.serialized_native_type.clone()).expect(&error_msg)
    }
}

impl TryFrom<NativeTypeInstance> for MsSqlType {
    type Error = native_types::Error;

    fn try_from(value: NativeTypeInstance) -> Result<Self, Self::Error> {
        let args = value
            .args
            .iter()
            .map(|v| format!("{}", v))
            .collect::<Vec<_>>()
            .join(",");

        let typ = if args.len() > 0 {
            format!("{}({})", value.name, args).parse()?
        } else {
            value.name.parse()?
        };

        Ok(typ)
    }
}
