# Raw Graph

Result Nodes: [Node 22]
Marked Nodes: []
Root Nodes: [Node 1]

Node 1: ManyRecordsQuery(name: 'read_ids_infallible', model: User, args: QueryArguments { model: Model { name: "User", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: false, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Optional, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "tag", is_required: false, is_list: true, relation_name: "TagToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "tagWinary", is_required: false, is_list: true, relation_name: "TagWineryToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "winary", is_required: false, is_list: true, relation_name: "UserToWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "User", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "email", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Optional, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tag", relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinary", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "winary", relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("test2@example.org")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
  Child (edge 1): Node 2 - ParentProjection (User | ["id"])
  Child (edge 5): Node 4 - ParentProjection (User | ["id"])
  Child (edge 32): Node 0 - ExecutionOrder

Node 2: (If (condition func)
  Child (edge 2): Node 4 - Then
  Child (edge 3): Node 3 - Else
  Child (edge 4): Node 0 - ParentProjection (User | ["id"])

Node 4: (return projections)


Node 3: CreateRecord(model: User, args: WriteArgs { args: {"email": String("test2@example.org"), "id": String("ab323db3-9619-47b7-a8a4-eeffcf205266")} })
  Child (edge 6): Node 5 - ParentProjection (User | ["id"])

Node 5: (return projections)


Node 0: CreateRecord(model: Winery, args: WriteArgs { args: {"id": String("bfdab71b-6611-4e86-90f0-d8684af5419d"), "createdAt": DateTime(2020-08-11T11:43:29.241Z), "name": String("Winery XX")} })
  Child (edge 7): Node 7 - ExecutionOrder
  Child (edge 21): Node 17 - ExecutionOrder
  Child (edge 28): Node 6 - ParentProjection (Winery | ["id"])
  Child (edge 29): Node 22 - ParentProjection (Winery | ["id"])

Node 7: ManyRecordsQuery(name: 'read_ids_infallible', model: Tag, args: QueryArguments { model: Model { name: "Tag", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "createdAt", type_identifier: DateTime, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(now)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "author", is_required: true, is_list: false, relation_name: "TagToUser", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "User", fields: ["authorId"], to_fields: ["id"], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([(Weak)]) }), Scalar(ScalarField { name: "authorId", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(true) }), Relation(RelationField { name: "tagWinery", is_required: false, is_list: true, relation_name: "TagToTagWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagToTagWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "Tag", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "createdAt", field_type: Base(DateTime, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(now)), is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "author", relation_info: RelationInfo { to: "User", fields: ["authorId"], to_fields: ["id"], name: "TagToUser", on_delete: None }, arity: Required, documentation: None, is_generated: false, is_commented_out: false }), ScalarField(ScalarField { name: "authorId", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinery", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagToTagWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "name", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("Tag 2")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
  Child (edge 0): Node 6 - ExecutionOrder
  Child (edge 15): Node 8 - ParentProjection (Tag | ["id"])
  Child (edge 19): Node 15 - ParentProjection (Tag | ["id"])

Node 6: CreateRecord(model: TagWinery, args: WriteArgs { args: {"id": String("f880ca80-2ce0-4fdd-856f-791a84ccb466"), "createdAt": DateTime(2020-08-11T11:43:29.242Z)} })


Node 8: (If (condition func)
  Child (edge 8): Node 10 - Else
  Child (edge 16): Node 15 - Then
  Child (edge 18): Node 6 - ParentProjection (Tag | ["id"])

Node 10: ManyRecordsQuery(name: 'read_ids_infallible', model: User, args: QueryArguments { model: Model { name: "User", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: false, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Optional, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "tag", is_required: false, is_list: true, relation_name: "TagToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "tagWinary", is_required: false, is_list: true, relation_name: "TagWineryToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "winary", is_required: false, is_list: true, relation_name: "UserToWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "User", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "email", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Optional, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tag", relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinary", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "winary", relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("test2@example.org")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
  Child (edge 9): Node 11 - ParentProjection (User | ["id"])
  Child (edge 13): Node 13 - ParentProjection (User | ["id"])
  Child (edge 30): Node 9 - ExecutionOrder

Node 11: (If (condition func)
  Child (edge 10): Node 13 - Then
  Child (edge 11): Node 12 - Else
  Child (edge 12): Node 9 - ParentProjection (User | ["id"])

Node 13: (return projections)


Node 12: CreateRecord(model: User, args: WriteArgs { args: {"id": String("9d22d4df-3341-491d-9b05-37917d3091b9"), "email": String("test2@example.org")} })
  Child (edge 14): Node 14 - ParentProjection (User | ["id"])

Node 14: (return projections)


Node 9: CreateRecord(model: Tag, args: WriteArgs { args: {"name": String("Tag 2"), "id": String("2be02c4c-f0a7-4254-a8bb-5bc4c4f4e2cc"), "createdAt": DateTime(2020-08-11T11:43:29.242Z)} })
  Child (edge 20): Node 16 - ParentProjection (Tag | ["id"])

Node 16: (return projections)


Node 15: (return projections)


Node 17: ManyRecordsQuery(name: 'read_ids_infallible', model: User, args: QueryArguments { model: Model { name: "User", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: false, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Optional, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "tag", is_required: false, is_list: true, relation_name: "TagToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "tagWinary", is_required: false, is_list: true, relation_name: "TagWineryToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "winary", is_required: false, is_list: true, relation_name: "UserToWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "User", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "email", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Optional, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tag", relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinary", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "winary", relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("test2@example.org")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
  Child (edge 17): Node 6 - ExecutionOrder
  Child (edge 22): Node 18 - ParentProjection (User | ["id"])
  Child (edge 26): Node 20 - ParentProjection (User | ["id"])
  Child (edge 31): Node 7 - ExecutionOrder

Node 18: (If (condition func)
  Child (edge 23): Node 20 - Then
  Child (edge 24): Node 19 - Else
  Child (edge 25): Node 6 - ParentProjection (User | ["id"])

Node 20: (return projections)


Node 19: CreateRecord(model: User, args: WriteArgs { args: {"email": String("test2@example.org"), "id": String("dbf9472e-f461-4e91-ba33-63fe2e3e7a12")} })
  Child (edge 27): Node 21 - ParentProjection (User | ["id"])

Node 21: (return projections)


Node 22: RecordQuery(name: 'createOneWinery', filter: None, selection: ["id", "author"])


------------------------
# Execution graph

SEQ
  LET
    bind 1
      READ ManyRecordsQuery(name: 'read_ids_infallible', model: User, args: QueryArguments { model: Model { name: "User", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: false, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Optional, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "tag", is_required: false, is_list: true, relation_name: "TagToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "tagWinary", is_required: false, is_list: true, relation_name: "TagWineryToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "winary", is_required: false, is_list: true, relation_name: "UserToWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "User", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "email", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Optional, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tag", relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinary", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "winary", relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("test2@example.org")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
    LET
      bind 2
        LET
          bind 2
            IF
              SEQ
                LET
                  bind 3
                    WRITE CreateRecord(model: User, args: WriteArgs { args: {"email": String("test2@example.org"), "id": String("ab323db3-9619-47b7-a8a4-eeffcf205266")} })
                  RETURN
          LET
            bind 0
              LET
                bind 0
                  WRITE CreateRecord(model: Winery, args: WriteArgs { args: {"authorId": String("ab323db3-9619-47b7-a8a4-eeffcf205266"), "id": String("bfdab71b-6611-4e86-90f0-d8684af5419d"), "createdAt": DateTime(2020-08-11T11:43:29.241Z), "name": String("Winery XX")} })
                SEQ
                  LET
                    bind 17
                      READ ManyRecordsQuery(name: 'read_ids_infallible', model: User, args: QueryArguments { model: Model { name: "User", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: false, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Optional, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "tag", is_required: false, is_list: true, relation_name: "TagToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "tagWinary", is_required: false, is_list: true, relation_name: "TagWineryToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "winary", is_required: false, is_list: true, relation_name: "UserToWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "User", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "email", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Optional, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tag", relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinary", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "winary", relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("test2@example.org")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
                    SEQ
                      IF <<< this should be bind 18
                        SEQ
                          RETURN
                      LET
                        bind 7
                          READ ManyRecordsQuery(name: 'read_ids_infallible', model: Tag, args: QueryArguments { model: Model { name: "Tag", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "createdAt", type_identifier: DateTime, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(now)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "author", is_required: true, is_list: false, relation_name: "TagToUser", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "User", fields: ["authorId"], to_fields: ["id"], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([(Weak)]) }), Scalar(ScalarField { name: "authorId", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(true) }), Relation(RelationField { name: "tagWinery", is_required: false, is_list: true, relation_name: "TagToTagWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagToTagWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "Tag", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "createdAt", field_type: Base(DateTime, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(now)), is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "author", relation_info: RelationInfo { to: "User", fields: ["authorId"], to_fields: ["id"], name: "TagToUser", on_delete: None }, arity: Required, documentation: None, is_generated: false, is_commented_out: false }), ScalarField(ScalarField { name: "authorId", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinery", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagToTagWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "name", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("Tag 2")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
                        LET
                          bind 8
                            IF
                              SEQ
                                LET
                                  bind 10
                                    READ ManyRecordsQuery(name: 'read_ids_infallible', model: User, args: QueryArguments { model: Model { name: "User", is_embedded: false, manifestation: None, fields: OnceCell(Fields { all: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Scalar(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), Scalar(ScalarField { name: "name", type_identifier: String, is_required: false, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Optional, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }), Relation(RelationField { name: "tag", is_required: false, is_list: true, relation_name: "TagToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "tagWinary", is_required: false, is_list: true, relation_name: "TagWineryToUser", relation_side: B, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) }), Relation(RelationField { name: "winary", is_required: false, is_list: true, relation_name: "UserToWinery", relation_side: A, relation: OnceCell((Weak)), relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, model: "#ModelWeakRef#", fields: OnceCell([]) })], id: OnceCell(Some([ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) }])), id_field_names: [], scalar: OnceCell([(Weak), (Weak), (Weak)]), relation: OnceCell([(Weak), (Weak), (Weak)]), model: (Weak), created_at: OnceCell(None), updated_at: OnceCell(None) }), indexes: OnceCell([]), primary_identifier: OnceCell(ModelProjection { fields: [Scalar(ScalarField { name: "id", type_identifier: String, is_required: true, is_list: false, is_id: true, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: Some(DefaultValue::Expression(uuid)), model: "#ModelWeakRef#", is_unique: false, read_only: OnceCell(false) })] }), dml_model: Model { name: "User", fields: [ScalarField(ScalarField { name: "id", field_type: Base(String, None), arity: Required, database_name: None, default_value: Some(DefaultValue::Expression(uuid)), is_unique: false, is_id: true, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "email", field_type: Base(String, None), arity: Required, database_name: None, default_value: None, is_unique: true, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), ScalarField(ScalarField { name: "name", field_type: Base(String, None), arity: Optional, database_name: None, default_value: None, is_unique: false, is_id: false, documentation: None, is_generated: false, is_updated_at: false, is_commented_out: false }), RelationField(RelationField { name: "tag", relation_info: RelationInfo { to: "Tag", fields: [], to_fields: [], name: "TagToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "tagWinary", relation_info: RelationInfo { to: "TagWinery", fields: [], to_fields: [], name: "TagWineryToUser", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false }), RelationField(RelationField { name: "winary", relation_info: RelationInfo { to: "Winery", fields: [], to_fields: [], name: "UserToWinery", on_delete: None }, arity: List, documentation: None, is_generated: false, is_commented_out: false })], documentation: None, database_name: None, is_embedded: false, indices: [], id_fields: [], is_generated: false, is_commented_out: false }, internal_data_model: "#InternalDataModelWeakRef#" }, cursor: None, take: None, skip: None, filter: Some(And([Scalar(ScalarFilter { projection: Single(ScalarField { name: "email", type_identifier: String, is_required: true, is_list: false, is_id: false, is_auto_generated_int_id: false, is_autoincrement: false, internal_enum: None, behaviour: None, arity: Required, db_name: None, default_value: None, model: "#ModelWeakRef#", is_unique: true, read_only: OnceCell(false) }), condition: Equals(String("test2@example.org")) })])), order_by: [], distinct: None, ignore_skip: false, ignore_take: false }, selection: ["id"])
                                  LET
                                    bind 11
                                      IF
                                        SEQ
                                          RETURN
                                    LET
                                      bind 9
                                        WRITE CreateRecord(model: Tag, args: WriteArgs { args: {"authorId": String("ab323db3-9619-47b7-a8a4-eeffcf205266"), "name": String("Tag 2"), "id": String("2be02c4c-f0a7-4254-a8bb-5bc4c4f4e2cc"), "createdAt": DateTime(2020-08-11T11:43:29.242Z)} })
                                      RETURN