[workspace]
members = [
  "introspection-engine/core",
  "introspection-engine/connectors/introspection-connector",
  "introspection-engine/connectors/sql-introspection-connector",
  "introspection-engine/introspection-engine-tests",
  "migration-engine/cli",
  "migration-engine/connectors/migration-connector",
  "migration-engine/connectors/sql-migration-connector",
  "migration-engine/core",
  "migration-engine/migration-engine-tests",
  "query-engine/connectors/query-connector",
  "query-engine/connectors/sql-query-connector",
  "query-engine/core",
  "query-engine/query-engine",
  "prisma-fmt",
  "libs/datamodel/core",
  "libs/datamodel/connectors/datamodel-connector",
  "libs/datamodel/connectors/sql-datamodel-connector",
  "libs/json-rpc-stdio",
  "libs/prisma-inflector",
  "libs/sql-schema-describer",
  "libs/test-cli",
  "libs/user-facing-errors",
  "libs/prisma-models",
  "libs/prisma-value",
  "libs/feature-flags",
  "libs/native-types",
]

[profile.dev.package.backtrace]
opt-level = 3


[profile.release]
# Cargo defaults its optimization level to 3 for release builds, which optimizes the binary for speed.
# To instruct Cargo to optimize for minimal binary size, use the z optimization level in Cargo.toml
opt-level = 'z'
# By default, Cargo instructs compilation units to be compiled and optimized in isolation.
# LTO instructs the linker to optimize at the link stage.
# This can, for example, remove dead code and often times reduces binary size
lto = true
# Reduce Parallel Code Generation Units to Increase Optimization
codegen-units = 1
